var terms; // all terms in the glossary

var currentTerms; // list of all the terms that are expected to show in the current view (not counting clicked links)
var termLimit = 10;
var termsRevealedIndex; // how far into 'currentTerms' we have shown to the screen
var bottomTerm = null; // a link to the dom element of the last showing glossary term, so we can load more if they scroll to here
var id = 0;

// a way to keep track of the SVGs used to draw the connecting lines, and who the parent terms are for child terms
var svgs = {};
var parentTerms = {};
var lastClickedTerm = {}; // key: term id, value: the term id generated by the last clicked link within this term (so we know not to double-load)

//Way to single out Japanese Characters since fromCharCode doesn't diplay them very well and not in the ideal sequence if you loop it. lettersMap is used to substitute when displaying and searching.
const letters = ["~", "あ","か","が","さ","ざ","た","だ","な","は","ば","ぱ","ま","や","ら","わ","#","?", "NEW"];
const lettersMap = {
        "~" : ["~"],
        "あ": ["あ","い","う","え","お"],
        "か": ["か","き","く","け","こ"],
        "が": ["が","ぎ","ぐ","げ","ご"],
        "さ": ["さ","し","す","せ","そ"],
        "ざ": ["さ","じ","ぢ","ず","ぜ","ぞ"],
        "た": ["た","つ","て","と"],
        "だ": ["だ","ぢ","づ","で","ど"],
        "な": ["な","に","ぬ","ね","の"],
        "は": ["は","ひ","ふ","へ","ほ"],
        "ば": ["ば","び","ぶ","べ","ぼ"],
        "ぱ": ["ぱ","ぴ","ぷ","ぺ","ぽ"],
        "ま": ["ま","み","む","め","も"],
        "や": ["や","ゆ","よ"],
        "ら": ["ら","り","る","れ","ろ"]
};

// term of the day stuff
var todaysDate;
var todaysTerm;

// initialize the furigana converter. Initalize in the html since it has to load fully before everything else
const furishiro = new Kuroshiro();

var genreList = {
	"JRPG": "JRPG",
	"VN": "Visual Novel",
	"MB": "Mobile",
	"AC": "Action",
	"PZ": "Puzzle",
	"ST": "Strategy",
	"AD": "Adventure",
	"PL": "Platformer",
	"H": "Hentai",
  "OT": "Otome",
	"LN": "Light Novel",
	"MN": "Manga",
	"TT": "Tabletop",
	"AN": "Anime",
  "MV": "Movie",
  "VG": "Video Games",
  "SY": "Seiyuu",
  "EJ": "E-J",
  "MU": "Music",
  "VS": "Variety Shows"
};

// measures how many definitions and definitions are from each genre in the genre list
var genreCounts = {};
var defCounts= 0;
// a sub-header when you match an alternate term with search
var altMatches = {};

// read the glossary json data file and set everything up
function initGlossary(doInterface, doStats) {
  // randomize so it doesn't get cached
  // https://stackoverflow.com/questions/15041603/how-to-prevent-the-browser-from-caching-a-json-file
  var src = "assets/json/glossaryMaster.json?nocache=" + (new Date()).getTime();

  document.getElementById("search-input").setAttribute("placeholder", "ひらがな　カタカナ  漢字   Romaji")
	d3.json(src, function(error, rawData){
		if(error)console.error("Error loading JSON: " + error);

    terms = rawData;

    for(var t in terms) {
      defCounts += terms[t].tl.length;
      for(var v in terms[t].tl) {
          if(terms[t].tl[v].hasOwnProperty('genre')) {
              for(var g of terms[t].tl[v].genre) {
                  if(genreCounts.hasOwnProperty(g)) genreCounts[g]++;
                  else genreCounts[g] = 1;
            }
          }
        }
    }

    //setTimeout is very important so that the data is completely prepared before executing the next function, esp the furigana, which won't get displayed otherwise.
    //https://stackoverflow.com/questions/12051769/why-are-some-javascript-developers-using-settimeout-for-one-millisecond
		if(doInterface) {
			gfyCollection.setVidLoadedCallback(vidLoadedCallback);
			setTimeout(() => initInterface(), 1);
		}
		if(doStats)
      setTimeout(() => initStats(), 1);


	});
}

// when the video is done loading (and its dimensions are known), we'll have to redraw arrows
// this callback is called from gfycat.js on the "loadedmetadata" event for the html5 video object
// unfortunately this doesn't always happen immediately
// so set up a short timer until the dimensions have changed, then stop the timer
function vidLoadedCallback(vid) {
	vid.setAttribute('controls',true);
	// set the volume to our current volume
	vid.volume = localStorage.getItem('videoVolume') !== null ? localStorage.getItem('videoVolume') : 1;
	// keep track of when this volume changes and update localStorage so new vids get that volume as well
	vid.addEventListener('volumechange', (event) => {
		localStorage.setItem('videoVolume',Math.min(1, Math.max(0, vid.volume)));
	});
	var timer = setInterval(function() {
		if(vid.offsetWidth > 0) {
			clearInterval(timer);
			//redrawAllArrows();
		}
	}, 30)
}

// Call this function from console to create and download the master json file
// Essentially, the parsing takes too long and it's redundant to have it done every time the page loads
// if you can just get the parsed file and load that directly
// make sure to call this function every time glossaryRaw.json is updated and upload the resulting file
function createMaster() {
  furishiro.init(new KuromojiAnalyzer({ dictPath: "assets/js/dict" }))
    .then(() => prepareData());
}

function makeJson(terms){
var jsonfile = JSON.stringify(terms);

var blob = new Blob([jsonfile], {type: "application/json"});
  e = document.createEvent('MouseEvents');
  a = document.createElement('a');

  a.download = "glossaryMaster.json";
  a.href = window.URL.createObjectURL(blob);
  a.dataset.downloadurl =  ["application/json", a.download, a.href].join(':');
  e.initMouseEvent('click', true, false, window, 0, 0, 0, 0, 0, false, false, false, false, 0, null);
  a.dispatchEvent(e);
}

function prepareData() {
  d3.json("assets/json/glossaryRaw.json", function(error, rawData){
  		if(error)console.error("Error loading JSON: " + error);

  	  var masTerms = {};

    	rawData.forEach(function(d) {
    		if(d.term.length > 0) {
    			masTerms[d.term.toLowerCase()] = d;
    			d.termStripped = [stripPuncAndSpace(d.term)];
          d.hasKatakana = Kuroshiro.Util.hasKatakana(stripPuncAndSpace(d.term));
          d.hepburn = toHepburn(d.romakana);
          d.kunrei = toKunrei(d.romakana);
          d.nihon = toNihon(d.romakana);
          if(d.hasOwnProperty('altterm')) {
            for(var st of d.altterm)
              d.termStripped.push(stripPuncAndSpace(st));
          }
          // add to stats, and also make definition searcheable.
          d.altsearch = "";
          d.tl.forEach(function(e) {
            d.altsearch += stripPuncAndSpace(e.def)
          });
          // this has to come last to avoid a fuzzy situation with d.altsearch that can potentially have a value of undefined
          // since furishiro.convert always comes last no matter what and there's no easy way to assign altsearch without getting overwritten
          if(d.hasOwnProperty('kanaOverride')) {
            d.furigana = d.kanaOverride;
            d.altsearch += Kuroshiro.Util.kanaToHiragana(d.kanaOverride) + d.hepburn;
          }
          else {
                furishiro.convert(d.term, { to: "hiragana", mode: "furigana" }).then(result => d.furigana = result);
                furishiro.convert(d.term, { to: "hiragana", mode: "normal" }).then(result => d.altsearch += (Kuroshiro.Util.hasKatakana(d.term) ? Kuroshiro.Util.kanaToHiragana(d.term) : result)  + d.hepburn);
          };
    		//	d.parsed = false;
    		}
    	});
      setTimeout(() => makeJson(masTerms), 1)
    })
}

// convert to romaji for display
function toHepburn(str) {
return Kuroshiro.Util.kanaToRomaji(str, "hepburn");
}

function toNihon(str) {
return Kuroshiro.Util.kanaToRomaji(str, "nippon");
}

function toKunrei(str) {
return Kuroshiro.Util.kanaToRomaji(str, "kunrei");
}

// strips punctuations except ~
function stripPunc(s) {
	return s.replace(/[.,\/#!$%\^&\*;:{}=\-_`()'"]/g,"").replace(/\s{2,}/g," ");
}
function stripPuncAndSpace(s) {
	return s.replace(/[.,\/#!$%\^&\*;:{}=\-_`() '"]/g,"").replace(/\s{2,}/g," ");
}

// check if src is a URL (https://stackoverflow.com/questions/5717093/check-if-a-javascript-string-is-a-url)
function isValidHttpUrl(string) {
  var url;

  try {
    url = new URL(string);
  } catch (_) {
    return false;
  }

  return url.protocol === "http:" || url.protocol === "https:";
}

function initInterface() {
	var divFilters = document.getElementById('glossary-filters');
	var genreFilters = document.getElementById('glossary-genre')
	document.getElementById('search-input').value = "";
  document.getElementById('search-input').onclick = () => document.getElementById("search-input").setAttribute("placeholder", "Search " + Object.keys(terms).length + " terms and " + defCounts + " definitions")
	computeTermOfTheDay();


	// make the letter filters
	letters.forEach(function(d) {
		var a = document.createElement('a');
		a.setAttribute("class","glossary-header");
		a.innerHTML = d;
		var e = d.replace(/[~あかがさざただなはばぱまやら]/g, function (m) {
    	return lettersMap[m].toString().replace(/,/g, " ");
		});
		a.title = "Terms starting with " + (d === '#' ? 'a number' : e);
		if(d === '?') a.title = "Terms in random order";
    if(d === 'NEW') a.title = "Newest terms";
    a.onmouseover = function() {
      if(d == "?") {
        document.getElementById("search-input").setAttribute("placeholder", "Terms in random order");
      }
      else if(d == "#") {
        document.getElementById("search-input").setAttribute("placeholder", "Terms starting with a number");
      }
      else if(d == "NEW") {
        document.getElementById("search-input").setAttribute("placeholder", "Newest terms");
      }
      else {
        document.getElementById("search-input").setAttribute("placeholder", "Terms starting with " + e);
      }
    }
    a.onmouseout = function() {
      document.getElementById("search-input").setAttribute("placeholder", "Search " + Object.keys(terms).length + " terms and " + defCounts + " definitions")
    }
		a.onclick = function() {
			clearHeaderHighlights();
			d3.select(this).classed('selected',true);
			populateByHeader(d);
			return false;
		}
		divFilters.appendChild(a);
	});

	// make the genre filters (first, get sorted genre counts for the ordering)
	var sortedCounts = Object.entries(genreCounts);
	sortedCounts.sort((a,b) => b[1] - a[1]);
	//sortedCounts.sort((a,b) => genreList[a[0]].localeCompare(genreList[b[0]]));
	sortedCounts.forEach(function (d) {
		var img = document.createElement('img')
		d3.select(img).datum(genreList[d[0]]);
		img.setAttribute('class','glossary-genre-header');
		img.setAttribute('src','assets/media/' + d[0] + '.png');
		img.setAttribute('title',genreList[d[0]] + ' (' + d[1] + ' terms)');
    img.onmouseover = function() {
      document.getElementById("search-input").setAttribute("placeholder", genreList[d[0]] + ' (' + d[1] + ' terms)')
    }
    img.onmouseout = function() {
      document.getElementById("search-input").setAttribute("placeholder", "Search " + Object.keys(terms).length + " terms and " + defCounts + " definitions")
    }
		img.onclick = function() {
			clearHeaderHighlights();
			d3.select(this).classed('selected',true);
			populateByGenre(d[0]);
			return false;
		}
		genreFilters.appendChild(img);
	});

	// check if they are following a link that specifies an exact term
	// if so, show it to them (or if the term doesn't exist, do a search for it)
	var tParam = GetURLParameter('t');
	var arr = [];
	if(tParam) {
		var caseParam = tParam.replace(/\+/g,' '); // save a properly cased version for display in search bar
		tParam = caseParam.toLowerCase();
		if(terms.hasOwnProperty(tParam))
			arr.push(terms[tParam]);
		else {
			arr = searchForTerm(tParam);
			document.getElementById('search-input').value = caseParam;
		}
	}
	else {
		if(todaysTerm)
			arr.splice(0, 0, todaysTerm);
	}

	populateTerms(arr, !tParam && todaysTerm);
}

function clearHeaderHighlights() {
	d3.selectAll('.glossary-header').classed('selected',false);
	d3.selectAll('.glossary-genre-header').classed('selected',false);
}

//https://stackoverflow.com/questions/175739/how-can-i-check-if-a-string-is-a-valid-number
function isNumeric(str) {
  if (typeof str != "string") return false // we only process strings!
  return !isNaN(str) && // use type coercion to parse the _entirety_ of the string (`parseFloat` alone does not do this)...
         !isNaN(parseFloat(str)) // ...and ensure strings of whitespace fail
}

// add all terms starting with a letter or "[ALL]" to do every term in the glossary
// or "?" to scramble every term in the glossary
// t.charAt(0).toUpperCase() if using English letters; not applicable for Japanese Characters
// stripPunc(terms[t].romakana) -- for terms that start in parentheses such as (~ったら)知らない. () is removed so the first character is ~ (excluded punc)
// romakana instead of termstripped -- non-kanji as first character
function populateByHeader(letter) {
	altMatches = {};
	var list = [];
  var letterArray = lettersMap[letter];

  if(Array.isArray(letterArray)) {
    for (var i = 0; i < letterArray.length; i++) {
      for(var t in terms) {
        var v = stripPunc(terms[t].romakana);
        var u = v.charAt(0);
  			if(u === letterArray[i])
  				list.push(terms[t]);
  		}
    }
    list.sort(function(a,b) { return a.romakana.localeCompare(b.romakana); });
  }
  else {
    if (letter == 'NEW') {
        var orderedList = Object.keys(terms).reverse();

        for (var t in orderedList) {
        list.push(terms[orderedList[t]]);
      }
        }
    else if (letter !== '?') {
  		for(var t in terms) {
        var u = terms[t].romakana.charAt(0);
  			if(letter === "[ALL]" || u === letter ||
  				(letter === "#" && (isNumeric(u))))
  				list.push(terms[t]);
  		}
  		list.sort(function(a,b) { return a.romakana.localeCompare(b.romakana); });
    }
  	else {
  		list = Object.values(terms);
  		shuffle(list);
  	}
  }
	populateTerms(list);
}

function populateByGenre(genre) {
	altMatches = {};
	var list = [];
	for(var t in terms)
  terms[t].tl.forEach(function(e) {
    if(e.hasOwnProperty("genre") && e.genre.includes(genre)) {
      list.push(terms[t]);
    }
  });
	list.sort(function(a,b) { return a.romakana.localeCompare(b.romakana); });
	populateTerms(list, false, genre);
}

// wipe the current term list and populate the space with new terms
function populateTerms(termlist, isTopTermOfTheDay, genre) {
	svgs = {}; // don't have to erase the SVGs, they get wiped below with all the other terms
	parentTerms = {};
	lastClickedTerm = {};
	currentTerms = termlist;
	termsRevealedIndex = termLimit;

	var divSpace = d3.select("#glossary-wrapper");
	divSpace.selectAll("*").remove();
	divSpace[0][0].innerHTML = "";

	// add a max of termLimit terms, keep track of which one is the bottom term
	var bot = null;
	for(var i=0; i<Math.min(termLimit,termlist.length); i++)
		bot = addTerm(termlist[i], i===0 && isTopTermOfTheDay, genre);
	bottomTerm = bot; // assign at the end, just in case of weird issues while scrolling

	if(termlist.length == 0) {
		var empty = document.createElement('div');
		empty.setAttribute('class','noresults');
		empty.innerHTML = "No results<br/>Clear your cache to reload the database or you can submit your own term.";
		document.getElementById('glossary-wrapper').appendChild(empty);
	}
}

// gets a d3 object representing a div for a term
function getDivForTerm(term, closeButton, isTermOfTheDay, genre) {
	//if(!term.parsed) parseLinks(term);
  var i = 0;
  var index = term.tl.length;
	var dom = document.createElement("div");
	var div = d3.select(dom)
		.data([term])
		.attr("class","term")
		.attr("id","term-"+(id++))

	// term of the day header
	if(isTermOfTheDay) {
		div.append('div')
			.classed('termOfTheDay',true)
			.html("Term of the Day: " + todaysDate)
	}

	var headerdiv = div.append('div').attr('class','headerdiv');

  // the "link to term" icon
  var alink = headerdiv.append('a')
    .attr('href','/?t=' + term.term)
    .attr('target','_blank')
    .attr('class','linkToTerm');

  alink.append('img')
    .attr('src','assets/media/link.png')
    .attr('title','Link to ' + term.term);

  // other external links
  headerdiv.append('a')
    .attr('href', 'https://jisho.org/search/' + term.term)
    .attr('target', '_blank')
    .attr('title','Search Jisho')
    .attr('class', 'exlink')
    .text("J");

  headerdiv.append('a')
    .attr('href', 'https://eow.alc.co.jp/search?q=' + term.term)
    .attr('target', '_blank')
    .attr('title','Search ALC')
    .attr('class', 'exlink')
    .text("A");

  headerdiv.append('a')
    .attr('href', 'https://dictionary.goo.ne.jp/srch/all/' + term.term + '/m0u/')
    .attr('target', '_blank')
    .attr('title','Search Goo Jisho')
    .attr('class', 'exlink')
    .text("G");

  headerdiv.append('a')
    .attr('href', 'https://kotobank.jp/gs/?q=' + term.term)
    .attr('target', '_blank')
    .attr('title','Search Kotobank')
    .attr('class', 'exlink')
    .text("K");

  headerdiv.append('a')
    .attr('href', 'https://www.weblio.jp/content/' + term.term)
    .attr('target', '_blank')
    .attr('title','Search Weblio')
    .attr('class', 'exlink')
    .text("W");


  // the term (aka, the header) // override with term and kana if present
	headerdiv.append('div')
		.html(function(d) { return (term.hasOwnProperty("kanaOverride") ? d.term + " [" + d.kanaOverride + "]" : d.furigana); })
		.attr("class","name");

  // if the term has matched an alternate term, show it here
  if(altMatches.hasOwnProperty(term.term)) {
    headerdiv.append('div')
      .attr('class','subname')
      .html('Similar: ' + altMatches[term.term]);
  }
  // subheaders for romaji and literal meaning
  headerdiv.append('div')
    .attr("class", "romajiName")
    .text(function(d) {
        if(d.hepburn == d.nihon) {
          return "R: " + d.hepburn;
        }
          return ("H: " + d.hepburn + (d.nihon === d.kunrei ? " | N/K: " + d.nihon : " | N: " + d.nihon + " | K: " + d.kunrei ));
      });

  if(term.hasOwnProperty("lit")){
  headerdiv.append('div')
    .attr("class", "literal")
    .html(function(d) { return "<em>Lit./Com. " + d.lit + "</em>"; });
  }

	// the close button, if needed
	// this close button behaves a little differently than the close button for media
	if(closeButton) {
		headerdiv.append('img')
			.attr('src','assets/media/misc/close-icon.png')
			.attr('class','term-close-button')
			.on('click', function() {
				var thisid = d3.select(this.parentElement.parentElement).attr('id');

				$(this.parentElement.parentElement).fadeOut(function() {
					// find all children we need to remove from the parent (terms and images)
					var toRemove = [];
					// we'll always have to remove the main term from its parent
					toRemove.push(thisid);
					// we may also have to remove any expanded images from its parent
					d3.select('#'+thisid).selectAll('.media-container').each(function() {
						toRemove.push(d3.select(this).attr('id'));
					})
					// remove all valid items that have been assigned a parent, so arrows will no longer point to them
					for(var remove of toRemove) {
						if(parentTerms.hasOwnProperty(remove)) {
							// first, remove this as a child from its parent
							var array = svgs[parentTerms[remove]].children;
							var index = array.indexOf(remove);
							if(index > -1) array.splice(index, 1);
						}
					}

					// then redraw all the arrows
					// redrawAllArrows();

					// remove it from the lastClickedTerm object
					toRemove = [];
					for(var key in lastClickedTerm)
						if(lastClickedTerm[key] === thisid)
							toRemove.push(key);
					for(var key of toRemove)
						delete lastClickedTerm[key];

					// finally, remove it from the DOM
					d3.select(this).remove();
				});
			})
	}

	// an outer div for all the "content" (ie, stuff under the header)

  // Separate div for each definition
  var defwrapper = div.append('div')
    .attr('class','def-wrapper');

  term.tl.forEach(function(e) {
    i += 1;
    var defcontent;

    if(index === 1){
      defcontent = defwrapper.append('div').attr('class', 'def-content last');
    }
    else {
      defcontent = defwrapper.append('div').attr('class', 'def-content');
    }


    	// the definition/s
    defcontent.append('div')
      .text(i + ". "+ e.def)
      .attr('class', 'def');

    // the genres, if present
    if(e.hasOwnProperty("genre")) {
      for (var genre of e.genre) {
        defcontent.append('img')
          .attr('class','glossary-genre')
          .attr('src','assets/media/' + genre + '.png')
          .attr('title',genreList[genre])
          // we have to define this "function within a function" to preserve "genre", or else it changes on us when click is executed
          // a fun example of javascript scope: https://www.howtocreate.co.uk/referencedvariables.html
          .on('click',(function(g) {
            return function() {
              clearHeaderHighlights();
              d3.selectAll('.glossary-genre-header').filter(d => d === genreList[g]).classed('selected',true);
              window.scrollTo(0,0);
              populateByGenre(g);
              return false;
            }
          })(genre));
        }
      }

    // the explanation
    if(e.hasOwnProperty("defexp")){
      if(!e.hasOwnProperty("jpsam") && !e.hasOwnProperty("ensam") && !e.hasOwnProperty("img") && !e.hasOwnProperty("vid")) {
        defcontent.append('div')
          .html(e.defexp)
          .attr('class', 'defexp onlyexp');
      }
      else {
        defcontent.append('div')
          .html(e.defexp)
          .attr('class', 'defexp');
      }
    }

    // sample sentences
    if(e.hasOwnProperty("jpsam") && e.hasOwnProperty("ensam")) {
      defcontent.append('div')
        .text(e.jpsam)
        .attr('class', 'jpsam');

      defcontent.append('div')
        .text(e.ensam)
        .attr('class', 'ensam');
    }
    // images
    if(e.hasOwnProperty('img') || e.hasOwnProperty('vid')) {
    	var isImage = e.hasOwnProperty('img');

    	var a = document.createElement('div');
    	a.classList.add('lightbox');
    	defcontent[0][0].appendChild(a);
    	a.innerHTML = "See " + (isImage ? "image":"video") + " " +
    		"<img class='glossary-media-icon' src=assets/media/" + (isImage ? "image":"video") + "-icon.png>";

    	// put the media container here (with nothing in it) so it's in the right place in the DOM for a click later
    	defcontent.append('div')
    		.attr('id','media-'+(id++))
  			.classed('media-container',true)
    		.style('display','none');

    	d3.select(a).on('click',function(d) {
    		var showButton = d3.select(this).style('display','none');

    		var media = defcontent.select('.media-container');
    		media.style('display',null); // show the media container
    		// find the top level parent so we know where to draw the arrow from
    		var parentid = div.attr('id');
    		if(parentTerms.hasOwnProperty(parentid))
    			parentid = parentTerms[parentid];

    		if(isImage) {
    			// we have to insert the image this way so the functions are blocking and will complete correctly
    			var fig = document.createElement('figure');
    			var im = document.createElement('img');
    			fig.appendChild(im);
    			var cap = document.createElement('figcaption');
    			cap.innerHTML = e.img[1];
    			fig.appendChild(cap);
    			media[0][0].appendChild(fig);

    			im.onload = function() {
    				// addSVGArrow(document.getElementById(parentid),media[0][0]);
    				addMediaCloseButton(media[0][0],showButton);
    			}
    			im.setAttribute('src','assets/media/terms/' +
    				((e.img[0] === 'jpg' || e.img[0] === 'png' || e.img[0] === 'gif') ?
    					(term.term + '.' + e.img[0]) : e.img[0]));
    		}
    		else {
    			var fig = document.createElement('figure');
    			var im = document.createElement('img');
    			im.setAttribute('class','gfyitem');
    			im.setAttribute('data-id',e.vid[0]);
    			fig.appendChild(im);
    			var cap = document.createElement('figcaption');
    			cap.innerHTML = e.vid[1];
    			fig.appendChild(cap);
    			media[0][0].appendChild(fig);

    			gfyCollection.scan();

    			// addSVGArrow(document.getElementById(parentid),media[0][0]);
    			addMediaCloseButton(media[0][0],showButton);
    		}
    	});
  	}

    if(e.hasOwnProperty("src")){
      for(var y in e.src){
        if(isValidHttpUrl(e.src[y])){
          defcontent.append('div')
            .html("<em><a target='_blank' href='" + e.src[y] + "'>" + e.src[y] + "</a></em>")
            .attr('class', 'def-source');
        }
      else {
      defcontent.append('div')
        .html("<em>" + e.src[y] + "</em>")
        .attr('class', 'def-source');
        }
      }
    }

    if(e.hasOwnProperty("credit")){
      defcontent.append('div')
        .html("<em>Contributed by: " + e.credit + "</em>")
        .attr('class', 'credit');
    }
    index -= 1;
  })
	return div;
}

// adds a close button (with appropriate click events) to an image or video
// pass it the .media-container object that contains everything, and the "show image/video" button as a d3 object
function addMediaCloseButton(mediaContainer,showButton) {
	d3.select(mediaContainer).append('img')
		.attr('src','assets/media/misc/close-icon.png')
		.attr('class','term-close-button')
		.on('click', function() {
			var thisid = d3.select(mediaContainer).attr('id');

			$(mediaContainer).fadeOut(function() {
				var toRemove = [];
				toRemove.push(thisid);
				// remove all valid items that have been assigned a parent, so arrows will no longer point to them
				for(var remove of toRemove) {
					if(parentTerms.hasOwnProperty(remove)) {
						// first, remove this as a child from its parent
						var array = svgs[parentTerms[remove]].children;
						var index = array.indexOf(remove);
						if(index > -1) array.splice(index, 1);
					}
				}

				// remove the stuff from the media container, allow it to be showable again if they re-click the show button
				d3.select(this).style('display',null)
					.selectAll('*').remove();

				// turn back on the "show" button
				showButton.style('display',null);
				// rehide the media container
				d3.select(mediaContainer).style('display','none');

			});
		})
}

// adds a term to the end with no animation
// use this method to populate the list from scratch or add terms when clicking to see next in list
function addTerm(term, isTermOfTheDay, genre) {
	var div = getDivForTerm(term, false, isTermOfTheDay, genre)[0][0];
	document.getElementById("glossary-wrapper").appendChild(div);
	return div;
}

function expandWithMoreTerms() {
	if(termsRevealedIndex < currentTerms.length) {
		var bot = null;
		for(var i=termsRevealedIndex; i<Math.min(termsRevealedIndex+termLimit, currentTerms.length); i++)
			bot = addTerm(currentTerms[i]);
		bottomTerm = bot;

		termsRevealedIndex += termLimit;

		// if(termsRevealedIndex >= currentTerms.length)
		// 	d3.select('#glossary-expand').style('display','none');
	}
}

// perform search query if 'enter' was pressed on search box
// Katakana has to be handled differently.
// First, katakana has to be detected so searches are weighed to prioritize katakana terms. Each term is marked if it has katakana or not.
// Second, the search term has to be flattened to hiragana since all terms have a hiragana equiv. making them easier to search
function searchKeyDown(event) {
	var s = document.getElementById('search-input').value;
	var key = event.which || event.keyCode;
  var hasKatakana = Kuroshiro.Util.hasKatakana(s);

	if((s.length < 2 && !Kuroshiro.Util.isJapanese(s)) || key != 13) // minimum length of 2 and hit the enter key
		return;

  if(Kuroshiro.Util.hasKatakana(s)) s = Kuroshiro.Util.kanaToHiragana(s);

	clearHeaderHighlights();
	populateTerms(searchForTerm(s, hasKatakana));
}

function searchForTerm(termString, hasKatakana) {
	var s = stripPuncAndSpace(termString.toLowerCase());
	altMatches = {};

	var regex;
	try {
		regex = new RegExp(s, "i");
	}
	catch(err) {
		console.log("error with glossary search:",err);
		return; // badly formed search query, just abandon ship
	}

	// search in terms and in definitions separately. Adjust for kana-only searches
	var inTerm = [];
	var inDef = [];
	for (var t in terms) {
		var found = false;
		var bestMatch = null;
		for(var i=0; i<terms[t].termStripped.length; i++) {
			if(terms[t].termStripped[i].match(regex)) {
				found = true;

				// find out how close of a match it is based on # of letters in search term vs matching term
				var diff = terms[t].termStripped[i].length - s.length;
				// save this difference in the array (for now), so we can sort based on it
				// we don't know if this is our closest match yet, so keep track of our best match
				if(bestMatch === null || bestMatch[1] > diff) {
					bestMatch = [terms[t],diff];
					// this matched a secondary term, so save it in "altMatches" so we can display it later
					if(i > 0)
						altMatches[terms[t].term] = terms[t].altterm[i-1];
				}
			}
		}
		if(bestMatch)
			inTerm.push(bestMatch);
		// if not found in a term and length of search query is 3 or more letters, search in definition
		if(!found && (s.length > 2 || Kuroshiro.Util.isJapanese(s)) && terms[t].altsearch.match(regex))
			inDef.push(terms[t]);
	}

	function alpha(a,b) { return a.romakana.localeCompare(b.romakana); }
  function kataSort(a,b) { return b.hasKatakana - a.hasKatakana; }

	inTerm.sort((a,b) => a[1] - b[1] || alpha(a[0],b[0])); // sort by closeness first, then alpha

	inTerm = inTerm.map(a => a[0]); // flatten the array now that we've sorted based on closeness
	inDef.sort(alpha);

	// concatenate all the sorted arrays
  inTerm.push.apply(inTerm, inDef);

  // prioritize katakana if the search term is katakana
  if(hasKatakana) inTerm.sort(kataSort);

	return inTerm;
}

function initStats() {
	var div = d3.select('#glossary-stats');

	var s = "";
	var g = Object.keys(terms);
	var sortedCounts = Object.entries(genreCounts);
	sortedCounts.sort((a,b) => b[1] - a[1]);
	var pad = "10px";

	s += "<div style='padding: " + pad + ";'>"
	s += "<span class='stats-header'>Total number of terms:</span> " + g.length;
	s += "<br><span class='stats-header'>Terms with a video or image:</span> " + g.filter(key => terms[key].hasOwnProperty('video') || terms[key].hasOwnProperty('image')).length;
	s += "<br><span class='stats-header'>Terms with a Japanese translation:</span> " + g.filter(key => terms[key].hasOwnProperty('jp')).length;
	s += "</div><hr class='stats-hr'></hr>";
	s += "<div style='padding: " + pad + ";'>"
	s += "<span class='stats-header'>Terms with no genre:</span> " + g.filter(key => !terms[key].hasOwnProperty('genre')).length;
	s += "<br><div class='stats-by-genre'>";
	for(var genre of sortedCounts)
		s += "<div><img src='assets/media/icons/" + genre[0] + ".png' class='stats-genre-icon' title='" + genreList[genre[0]] + "'> " + genre[1] + "</div>"
	s += "</div></div>";

	div.html(s);
}

function shuffle(a) {
    var j, x, i;
    for (i = a.length - 1; i > 0; i--) {
        j = Math.floor(Math.random() * (i + 1));
        x = a[i];
        a[i] = a[j];
        a[j] = x;
    }
    return a;
}
function GetURLParameter(sParam) {
	var sPageURL = window.location.search.substring(1);
    var sURLVariables = sPageURL.split('&');
    for (var i = 0; i < sURLVariables.length; i++) {
        var sParameterName = sURLVariables[i].split('=');
        if (sParameterName[0] == sParam)
            return decodeURI(sParameterName[1]);
    }
	return null;
}

var months = ["January","February","March","April","May","June","July","August","September","October","November","December"]
function computeTermOfTheDay() {
	// get a string representing today's date that is consistent no matter the time zone
	var date = new Date(Date.now());
	date = new Date(date.getTime() - 4*60*60000); // subtract 4 hours to wrap around midnight at eastern time
	todaysDate = months[date.getUTCMonth()] + " " +
		date.getUTCDate().toString().padStart(2,'0') + ", " + date.getUTCFullYear();

		var rand = randomWithSeed(xmur3Hash(todaysDate)());
		var keys = Object.keys(terms);
		todaysTerm = terms[keys[Math.floor(rand() * keys.length)]];
}

// hand-made javascript hash function and seedable random functions for Term of the Day
// https://stackoverflow.com/questions/521295/seeding-the-random-number-generator-in-javascript/
function xmur3Hash(str) {
    for(var i = 0, h = 1779033703 ^ str.length; i < str.length; i++)
        h = Math.imul(h ^ str.charCodeAt(i), 3432918353),
        h = h << 13 | h >>> 19;
    return function() {
        h = Math.imul(h ^ h >>> 16, 2246822507);
        h = Math.imul(h ^ h >>> 13, 3266489909);
        return (h ^= h >>> 16) >>> 0;
    }
}

function randomWithSeed(a) {
    return function() {
      var t = a += 0x6D2B79F5;
      t = Math.imul(t ^ t >>> 15, t | 1);
      t ^= t + Math.imul(t ^ t >>> 7, t | 61);
      return ((t ^ t >>> 14) >>> 0) / 4294967296;
    }
}


// a scroll event handler which will load more terms as we scroll down
$(window).scroll(function() {
	if(bottomTerm != null) {
		if($(window).scrollTop() + $(window).height() > $(bottomTerm).offset().top)
			expandWithMoreTerms();
	}
})

/*
function checkInitialTheme() {
	var theme = d3.select('html').classed('dark-mode') ? 'light' : 'dark';
	d3.select('#theme-selector')
		.attr('src','assets/media/misc/' + theme + '-mode.svg')
		.attr('title','Switch to ' + theme + ' mode')
}

function switchTheme(forceDark) {
	d3.select('html').classed('dark-mode',!d3.select('html').classed('dark-mode') || forceDark);

	var theme = d3.select('html').classed('dark-mode') ? 'light' : 'dark';
	d3.select('#theme-selector')
		.attr('src','assets/media/misc/' + theme + '-mode.svg')
		.attr('title','Switch to ' + theme + ' mode')

	localStorage.setItem('theme',theme === 'dark' ? 'light' : 'dark');
}
*/
